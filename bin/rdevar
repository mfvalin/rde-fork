#!/bin/ksh
# @Object: Echo specific RDE var or path
# @Author: S.Chamberland
# @Date:   March 2014

# Display help in xterm if user clicked on the file 
#if [[ -z $@ && $DISPLAY ]] && ! tty -s; then 
#    xterm -hold -e "$(dirname "$0")/$(basename "$0")" -h; exit 
#fi 

MYSELF=${0##*/}
DESC='Echo specific RDE var or path'
USAGE="Usage: ${MYSELF} [-h] [-l] [--arch ARCH]"

usage_long() {
	 toto=$(echo -e $USAGE)
	 more 1>&2 <<EOF
$DESC

$toto

Options:
    -h, --help  : print this help
    -l, --list  : list known vars, with short match if any
        --arch  : provide var as if EC_ARCH were provided arch

EOF
}

doshfile=0
domkfile=0
dolist=0
namelist=""
DEP_ARCH="$EC_ARCH"
while [[ $# -gt 0 ]] ; do
   case $1 in
      (-h|--help) usage_long; exit 0;;
      (-l|--list) dolist=1; shift ; break;;
      (--arch) 
         if [[ x$2 != x && x$(echo $2 | cut -c1) != x- ]] ; then
            shift ; DEP_ARCH=$1
         fi;;
      (--mkfile)  domkfile=1; shift ; break;;
      (--shfile)  doshfile=1; shift ; break;;
      (--) shift ; break;;
      (-*) echo "ERROR: Option Not recognized: $1" 1>&2 ; exit 1;;
      *) namelist="$namelist $1";;
    esac
    shift
done

namelist="$namelist $@"
export EC_ARCH=$DEP_ARCH
export BASE_ARCH=${DEP_ARCH%%/*}

INCSUFFIXES=".cdk .h .hf .fh .itf90 .inc .include"
SRCSUFFIXES=".c .cpp .f .ftn .ptn .f90 .f95 .f03 .ftn90 .ptn90 .cdk90 .tmpl90 .F .FOR .F90 .F95 .F03"

#COMP_ARCH0=${EC_ARCH##*/}
#hostarch=-${TRUE_HOST}-${COMP_ARCH:-${COMP_ARCH0:-unknown}}
hostarch=-${BASE_ARCH}
hostarch2=-${EC_ARCH}

RDE_INC=$rde/include/$RDE_COMPILER_VERSION
RDE_ARCH_LIST() {
   echo "$(cd $RDE_INC ; find */* -type d)"
}
RDE_BASE_ARCH_LIST() {
   echo "$(cd $RDE_INC ; find.py * --type=d --maxdepth=0)"
}
SRC_PATH_FILE=.rdesrcpath
mysrcpath0() {
   if [[ -r $SRC_PATH_FILE ]] ; then
      . ./$SRC_PATH_FILE
   fi
   echo $SRCPATH
}
mysrcpath0_recurse() {
   if [[ -r $SRC_PATH_FILE ]] ; then
      . ./$SRC_PATH_FILE
   fi
   #echo ${SRCPATH_RECURSE:-0}
   echo ${SRCPATH_RECURSE}
}
mysrcpath0_r() {
   if [[ -r $SRC_PATH_FILE ]] ; then
      . ./$SRC_PATH_FILE
   fi
   echo ${SRCPATH_R}
}
mysrcpath0_archlist() {
   if [[ -r $SRC_PATH_FILE ]] ; then
      . ./$SRC_PATH_FILE
   fi
   echo ${SRCPATH_ARCH_LIST}
}

myvars="
 rdeinc=          \$RDE_INC;
 rdesuffix=       \$INCSUFFIXES \$SRCSUFFIXES;
 rdesuffix/inc=   \$INCSUFFIXES;
 rdesuffix/src=   \$SRCSUFFIXES;
 rde_arch_list=   \$(RDE_ARCH_LIST);
 rde_base_arch_list= \$(RDE_BASE_ARCH_LIST);
 build=           build\${hostarch};
 build/src=       build\${hostarch2};
 build/pre=       build\${hostarch2};
 build/obj=       build\${hostarch2};
 build/mod=       build\${hostarch2};
 build/lib=       build\${hostarch2};
 build/bin=       build\${hostarch};
 build/run=       build\${hostarch};
 local/src=       .;
 local/bin=       bin;
 ref/src=         ref/src;
 ref/bin=         ref/bin;
 srcpathfile=     \${SRC_PATH_FILE};
 srcpath=         \$(mysrcpath0);
 srcpath_recurse= \$(mysrcpath0_recurse);
 srcpath_r=       \$(mysrcpath0_r);
 srcpath_arch_list= \$(mysrcpath0_archlist);
 storage=         \$(rdemodel_path -l storage);
"


if [[ $domkfile == 1 ]] ; then
   filename=Makefile.const.${BASE_ARCH}.mk
   echo > $filename
   #echo $eval $(echo $myvars | sed 's/;[ ]/;/g' | sed 's/=[ ]/ = /g') | tr ';' '\n'
   knownnames="$(echo $myvars | tr ';' '\n' | sed 's/=.*$//g' )"
   for myname in $knownnames ; do
      myvar="$(echo $myvars | tr ';' '\n' | grep "^ ${myname}=")"
      if [[ ! -n $myvar ]] ; then
         myvar="$(echo $myvars | tr ';' '\n' | grep "^${myname}=")"
      fi
      myname2=CONST_$(echo $myname | tr 'a-z' 'A-Z' | sed 's/\///g')
      echo "$myname2 := $(eval echo $(echo $myvar | cut -d= -f2))" >> $filename
   done
fi


if [[ $doshfile == 1 ]] ; then
   filename=.rde.const.${BASE_ARCH}.dot
   echo > $filename
   #echo $eval $(echo $myvars | sed 's/;[ ]/;/g' | sed 's/=[ ]/ = /g') | tr ';' '\n'
   knownnames="$(echo $myvars | tr ';' '\n' | sed 's/=.*$//g' )"
   for myname in $knownnames ; do
      myvar="$(echo $myvars | tr ';' '\n' | grep "^ ${myname}=")"
      if [[ ! -n $myvar ]] ; then
         myvar="$(echo $myvars | tr ';' '\n' | grep "^${myname}=")"
      fi
      myname2=CONST_$(echo $myname | tr 'a-z' 'A-Z' | sed 's/\///g')
      echo "$myname2='$(eval echo $(echo $myvar | cut -d= -f2))'" >> $filename
   done
fi


if [[ $dolist == 1 ]] ; then
   knownnames="$(echo $myvars | tr ';' '\n' | sed 's/=.*$//g' )"
   myname0=$(echo $namelist | cut -d' ' -f1)
   knownnames1=""
   for myname in $knownnames ; do
      myname2=$(echo $myname | sed "s|^$myname0||")
      if [[ x$myname0 == x || x$myname2 != x$myname ]] ; then
         knownnames1="$knownnames1 $myname"
      fi
   done
   echo "$knownnames1"
   exit 0
fi

for item in $namelist ; do
   myvar="$(echo $myvars | tr ';' '\n' | grep "^ ${item}=")"
   if [[ ! -n $myvar ]] ; then
      myvar="$(echo $myvars | tr ';' '\n' | grep "^${item}=")"
   fi
   if [[ -n $myvar ]] ; then
      echo $(eval echo $(echo $myvar | cut -d= -f2))
   else
      echo "ERROR: Unknown var name: $item" 1>&2
      exit 1
   fi
done

